import{flowConfig as e}from"@onflow/fcl-config";import{config as n}from"@onflow/config";import t from"fs";import a from"path";import*as r from"@onflow/fcl";import{send as s,build as o,getBlock as c,decode as i}from"@onflow/fcl";import{resolveArguments as l,getEnvironment as g,reportMissingImports as u,replaceImportAddresses as d,reportMissing as p,sendTransaction as f,extractContractParameters as m,generateSchema as w,splitArgs as h,deployContract as M,executeScript as A}from"flow-cadut";import{ec as b}from"elliptic";import{SHA3 as y}from"sha3";import*as k from"rlp";const S=(e,n,t)=>{if("string"==typeof n)return S(e,n.split("/"),t);if(!n.length)return e;try{const[a,...r]=n;return S(e[a],r,t)}catch(e){return t}},x=(t,a,r,s)=>{let o=S(e(),r,s);o||(o=s),n().put(t,o)},T=async e=>n().get(e),F=async(e,t={})=>{const{port:a}=t,{pkey:r="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=t;x("PRIVATE_KEY",process,"accounts/emulator-account/key",r),x("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),x("BASE_PATH",process,"testing/paths",e),a&&n().put("accessNode.api",`http://localhost:${a}`)};function v(){return v=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},v.apply(this,arguments)}const E=e=>null==e?null:e.replace(/^0x/,""),P=e=>null==e?null:"0x"+E(e),B=new b("p256"),C=(e,n)=>{const t=B.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new y(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),a=t.r.toArrayLike(Buffer,"be",32),r=t.s.toArrayLike(Buffer,"be",32);return Buffer.concat([a,r]).toString("hex")},I=(e,t=0)=>async(a={})=>{const s=await n().get("SERVICE_ADDRESS"),o=await n().get("PRIVATE_KEY");return v({},a,{tempId:`${e=E(e||s)}-${t}`,addr:r.sansPrefix(e),keyId:t,signingFunction:async n=>({keyId:t,addr:P(e),signature:C(o,n.message)})})},R=e=>"object"==typeof e&&null!==e,O=e=>async n=>{let t,a,r,s,o,c,i,l;if(R(n[0])){const[e]=n,{name:l,code:g,args:u,signers:d,transformers:p,limit:f,service:m=!1}=e;if(o=m,!l&&!g)throw Error("Both `name` and `code` are missing. Provide either of them");a=l,t=g,r=d,s=u,c=p||[],i=f}else"script"===e?[a,s,i,c]=n:[a,r,s,i,c]=n;if(i=i||999,a){const n="script"===e?Pe:Ee;t=await n({name:a})}l=o?Se:await ke(t);const g=await de(),u=v({},Se,l,{FlowManager:g});t=ye(t,u);for(const e in c){const n=c[e];t=await n(t)}return{code:t,signers:r,args:s,limit:i}},U=async(...e)=>{try{const n=O("tx"),{code:t,args:a,signers:s,limit:o}=await n(e),c=I(),i=[r.transaction(t),r.payer(c),r.proposer(c),r.limit(o)];if(s){const e=s.map(e=>I(e));i.push(r.authorizations(e))}else i.push(r.authorizations([c]));if(a){const e=await l(a,t);i.push(r.args(e))}const g=await r.send(i);return[await r.tx(g).onceExecuted(),null]}catch(e){return[null,e]}},$=async(...e)=>{try{const n=O("script"),{code:t,args:a,limit:s}=await n(e),o=[r.script(t),r.limit(s)];if(a){const e=await l(a,t);o.push(r.args(e))}const c=await r.send(o);return[await r.decode(c),null]}catch(e){return[null,e]}},L="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n\n",_=async(e={})=>{const n=v({},await g(),e);return u(L,n,"createAccount =>"),d(L,n)},D="\nimport FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",N=async(e={})=>{const n=v({},await g(),e);return u(D,n,"deployContract =>"),d(D,n)},H='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n  }\n',G=async(e={})=>{const n=v({},await g(),e);return u(H,n,"initManager =>"),d(H,n)},K='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',V=async(e={})=>{const n=v({},await g(),e);return u(K,n,"mintTokens =>"),d(K,n)},z="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",Y=async(e={})=>{const n=v({},await g(),e);return u(z,n,"registerContract =>"),d(z,n)},j="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",J=async(e={})=>{const n=v({},await g(),e);return u(j,n,"scratch =>"),d(j,n)},W="\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n",q=async(e={})=>{const n=v({},await g(),e);return u(W,n,"setBlockOffset =>"),d(W,n)},Q="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",X=async(e={})=>{const n=v({},await g(),e);return u(Q,n,"updateContract =>"),d(Q,n)};var Z={createAccountTemplate:_,createAccount:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await _(n);return p("arguments",t.length,3,"createAccount =>"),p("signers",a.length,1,"createAccount =>"),f(v({code:r},e))},deployContractTemplate:N,deployContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await N(n);return p("arguments",t.length,3,"deployContract =>"),p("signers",a.length,1,"deployContract =>"),f(v({code:r},e))},initManagerTemplate:G,initManager:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await G(n);return p("arguments",t.length,1,"initManager =>"),p("signers",a.length,1,"initManager =>"),f(v({code:r},e))},mintTokensTemplate:V,mintTokens:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await V(n);return p("arguments",t.length,2,"mintTokens =>"),p("signers",a.length,1,"mintTokens =>"),f(v({code:r},e))},registerContractTemplate:Y,registerContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await Y(n);return p("arguments",t.length,2,"registerContract =>"),p("signers",a.length,1,"registerContract =>"),f(v({code:r},e))},scratchTemplate:J,scratch:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await J(n);return p("arguments",t.length,0,"scratch =>"),p("signers",a.length,1,"scratch =>"),f(v({code:r},e))},setBlockOffsetTemplate:q,setBlockOffset:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await q(n);return p("arguments",t.length,1,"setBlockOffset =>"),p("signers",a.length,1,"setBlockOffset =>"),f(v({code:r},e))},updateContractTemplate:X,updateContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await X(n);return p("arguments",t.length,3,"updateContract =>"),p("signers",a.length,1,"updateContract =>"),f(v({code:r},e))}};const{updateContractTemplate:ee,deployContractTemplate:ne}=Z,te=e=>Buffer.from(e,"utf8").toString("hex"),ae=async(...e)=>{const n=await(async e=>{let n,t,a,r,s;if(R(e[0])){const[o]=e,{name:c,to:i,addressMap:l,args:g,update:u}=o;if(!c)throw Error("'name' field is missing");n=c,t=i,r=g,a=l,s=u}else[n,t,a,r,s]=e;const o=await de();return{name:n,to:t,args:r,update:s,addressMap:v({},Se,{FlowManager:o},a)}})(e),{to:t,name:a,addressMap:r,args:s,update:o=!1}=n,c=t||await de(),i=await ve({name:a,addressMap:r}),l=/[\\\/]/.test(a)?null:a;return re({to:c,code:i,name:l,args:s,update:o})},re=async e=>{const{to:n,code:t,name:a,args:r,update:s}=e,o=await m(t),c=a||o.contractName,i=n||await de(),l=await de(),g=await ke(t),u=await de(),d=v({},Se,g,{FlowManager:u}),p=te(ye(t,d));let f=s?await ee(d):await ne(d),M=[c,p,l];if(r){M=M.concat(r);const e=w(o.args).map(e=>h(e)[0]),n="abcdefghijklmnopqrstuvwxyz";let t=[];for(let a=0;a<e.length;a++)t.push(`${n[a]}: ${e[a]}`);f=f.replace("##ARGS-WITH-TYPES##",`, ${o.args}`),f=f.replace("##ARGS-LIST##",t)}else f=f.replace("##ARGS-WITH-TYPES##",""),f=f.replace("##ARGS-LIST##","");return U({code:f,args:M,signers:[i]})},se='\n  pub contract FlowManager {\n\n    /// Account Manager\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub fun getAccountAddress(_ name: String): Address?{\n        let accountManager = self.account\n            .getCapability(self.accountManagerPath)\n            .borrow<&FlowManager.Mapper>()!\n\n        return accountManager.getAddress(name)\n    }\n\n    pub let defaultAccounts: {Address : String}\n\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\n        let alias = self.defaultAccounts[address]!\n        return self.getAccountAddress(alias)!\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    /// Environment Manager\n    pub event BlockOffsetChanged(offset: UInt64)\n\n    pub struct MockBlock {\n        pub let id: [UInt8; 32]\n        pub let height: UInt64\n        pub let view: UInt64\n        pub let timestamp: UFix64\n\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\n            self.id = id\n            self.height = height\n            self.view = view\n            self.timestamp = timestamp\n        }\n    }\n\n    pub fun setBlockOffset(_ offset: UInt64){\n        self.blockOffset = offset\n        emit FlowManager.BlockOffsetChanged(offset: offset)\n    }\n\n    pub fun getBlockHeight(): UInt64 {\n        var block = getCurrentBlock()\n        return block.height + self.blockOffset\n    }\n\n    pub fun getBlock(): MockBlock {\n        var block =  getCurrentBlock()\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\n        return mockBlock\n    }\n\n    pub var blockOffset: UInt64;\n\n\n    // Initialize contract\n    init(){\n        // Environment defaults\n        self.blockOffset = 0;\n\n        // Account Manager initialization\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.defaultAccounts = {\n          0x01: "Alice",\n          0x02: "Bob",\n          0x03: "Charlie",\n          0x04: "Dave",\n          0x05: "Eve"\n        }\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n',oe="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n",ce="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",ie='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',le="\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n",ge="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var ue=Z;const de=async()=>P(await n().get("SERVICE_ADDRESS")),pe=async()=>{const e={FlowManager:await de()},n=await(async(e={})=>{const n=v({},await g(),e);return u(oe,n,"checkManager =>"),d(oe,n)})(e);let[t,a]=await $({code:n,service:!0});return a&&null===t&&await(async()=>{const e=await ue.initManagerTemplate(),n=await(async(e={})=>{const n=v({},await g(),e);return u(se,n,"FlowManager =>"),d(se,n)})(),t=[te(n)];await U({code:e,args:t,service:!0})})(),de()},fe=async()=>{const e=await pe(),n=await(async(e={})=>{const n=v({},await g(),e);return u(le,n,"getBlockOffset =>"),d(le,n)})({FlowManager:e});return $({code:n})},me=async e=>{const n=await pe(),t=[e],a=await ue.setBlockOffsetTemplate({FlowManager:n});return U({code:a,args:t,payer:[n]})},we=async(e,n=!1)=>{if(n){const n=Se[e];if(void 0!==n)return n}const t=await pe(),a={FlowManager:t},r=await(async(e={})=>{const n=v({},await g(),e);return u(ge,n,"getContractAddress =>"),d(ge,n)})(a),s=[e,t],[o]=await $({code:r,args:s,service:!0});return o},he=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,Me=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),Ae=(e,n)=>{const[t,a]=n;return e[t]=a,e},be=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(Me).reduce(Ae,{}):{},ye=(e,n,t=!0)=>e.replace(he,(e,a,r,s,o)=>{const c=t?r:o;return`${a}${r} from ${n instanceof Function?n(c):n[c]}`}),ke=async e=>{const n={},t=be(e);for(const e in t)if(Se[e])n[e]=Se[e];else{const t=await we(e);n[e]=t}return n},Se={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},xe={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},Te=async(e,t="transactions")=>{const r=await n().get("BASE_PATH");let s=r;if(R(r)){const n=r[t];if(n)return a.resolve(n,`./${e}.cdc`);s=r.base}return a.resolve(s,`./${t}/${e}.cdc`)},Fe=(e,n={},a=!1)=>{const r=(e=>t.readFileSync(e,"utf8"))(e);return n?ye(r,v({},a?xe:Se,n)):r},ve=async({name:e,addressMap:n})=>{const t=await Te(e,"contracts");return Fe(t,n)},Ee=async({name:e,addressMap:n})=>{const t=await Te(e,"transactions");return Fe(t,n)},Pe=async({name:e,addressMap:n})=>{const t=await Te(e,"scripts");return Fe(t,n)},Be={ExampleToken:Se.FlowToken},Ce=e=>e[0].toLowerCase()+e.slice(1),Ie=async e=>{const n=await(async e=>(await(async(e={})=>{const n=v({},await g(),e);return u(ie,n,"getBalance =>"),d(ie,n)})(Be)).replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:Ce(e)))("FlowToken"),t=ye(n,Se);return $({code:t,args:[e]})},Re=async(e,n)=>{const t=await(async e=>(await ue.mintTokensTemplate(Be)).replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:Ce(e)))("FlowToken"),a=ye(t,Se);return U({code:a,args:[e,n]})},Oe=async e=>{const t=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`,a=await pe(),r={FlowManager:a};let s;const o=await(async(e={})=>{const n=v({},await g(),e);return u(ce,n,"getAccountAddress =>"),d(ce,n)})(r),c=[t,a],[i]=await $({code:o,args:c,service:!0});if(s=i,null===s){const e=await ue.createAccountTemplate(r),o=[t,await(async()=>{const e=B.keyFromPrivate(Buffer.from(await n().get("PRIVATE_KEY"),"hex")).getPublic("hex").replace(/^04/,"");return k.encode([Buffer.from(e,"hex"),2,3,1e3]).toString("hex")})(),a],[c]=await U({code:e,args:o}),{events:i}=c;s=i.find(e=>e.type.includes("AccountAdded")).data.address}return s},{expect:Ue}=global,$e=async e=>"function"==typeof e?await e():await e,Le=async e=>{const n=$e(e),t=await n,[a,r]=t;if(r)throw r;let s,o;if(Array.isArray(a)){const{status:e,errorMessage:n}=a;s=e,o=n}else{const{status:e,errorMessage:n}=a;s=e,o=n}return await Ue(s).toBe(4),await Ue(o).toBe(""),t},_e=async e=>{const n=$e(e),t=await n,[,a]=t;return Ue(a).toBe(null),t},De=async e=>{const n=$e(e),t=await n,[a,r]=t;return await Ue(a).toBe(null),await Ue(r).not.toBe(null),t},Ne=async e=>{const n=$e(e),t=await n,[a,r]=t;return await Ue(a).toBe(null),await Ue(r).not.toBe(null),t},He=async e=>{let n=e;return((e,n)=>new RegExp("import\\s+FlowManager").test(n))(0,e)||(n=`\n      ${await(async()=>`import FlowManager from ${await de()}`)()}\n      ${e}  \n  `),n.replace(/getCurrentBlock\(\).height/g,"FlowManager.getBlockHeight()")},{spawn:Ge}=require("child_process"),Ke={log:console.log,service:console.log,info:console.log,error:console.error,warn:console.warn};var Ve=new class{constructor(){this.initialized=!1,this.logging=!1,this.filters=[],this.logProcessor=e=>e}setLogging(e){this.logging=e}log(e,n="log"){!1!==this.logging&&Ke[n](e)}checkLevel(e,n){return"debug"===n&&e.includes("LOG")?"log":n}extractKeyValue(e){const[n,t]=e.split("=");return t.includes("LOG")?{key:n,value:t.replace('"[1;34m','"[1[34m')}:{key:n,value:t}}fixJSON(e){const n=e.split("\n").filter(e=>""!==e);return n.length>1?`[${n.join(",")}]`:n[0]}parseDataBuffer(e){const n=e.toString();try{if(n.includes("msg"))return JSON.parse(this.fixJSON(n))}catch(e){return console.error(e),{msg:e,level:"JSON Error"}}return{msg:n,level:"parser"}}async start(e=8080,t={}){n().put("accessNode.api",`http://localhost:${e}`);const{flags:a="",logging:r=!1}=t;let l=e-8080+3569;return this.logging=r,this.process=Ge("flow",["emulator","--verbose","--log-format=JSON",`--admin-port=${e}`,`--port=${l}`,a]),this.logProcessor=e=>e,new Promise((n,t)=>{let a;a=setInterval(async function(){try{await s(o([c(!1)])).then(i),clearInterval(a),this.initialized=!0,n(!0)}catch(e){}},100),this.process.stdout.on("data",n=>{const t=this.parseDataBuffer(n);if(Array.isArray(t)){let e=[];this.filters.length>0&&(e=t.filter(e=>{const n=this.checkLevel(e.msg,e.level);return this.filters.includes(n)}));for(let n=0;n<e.length;n++){const e=t[n],{msg:a}=e,r=this.checkLevel(a,e.level);this.log(`${r.toUpperCase()}: ${a}`)}}else{const{msg:n}=t,a=this.checkLevel(n,t.level);this.filters.length>0?this.filters.includes(a)&&(this.log(`${a.toUpperCase()}: ${n}`),n.includes("Starting")&&n.includes(e)&&this.log("EMULATOR IS UP! Listening for events!")):(this.log(`${a.toUpperCase()}: ${n}`),t.msg.includes("Starting HTTP server")&&this.log("EMULATOR IS UP! Listening for events!"))}}),this.process.stderr.on("data",e=>{const{message:n}=this.parseDataBuffer(e);this.log(`EMULATOR ERROR: ${n}`,"error"),this.initialized=!1,clearInterval(a),t()}),this.process.on("close",e=>{this.filters.includes("service")&&this.log(`EMULATOR: process exited with code ${e}`),this.initialized=!1,clearInterval(a),n(!1)})})}clearFilters(){this.filters=[]}removeFilter(e){this.filters=this.filters.filter(n=>n!==e)}addFilter(e){this.filters.includes(e)||this.filters.push(e)}async stop(){return new Promise(e=>{this.process.kill(),setTimeout(()=>{this.initialized=!1,e(!1)},50)})}};export{He as builtInMethods,re as deployContract,ae as deployContractByName,Ve as emulator,$ as executeScript,be as extractImports,Oe as getAccountAddress,fe as getBlockOffset,T as getConfigValue,we as getContractAddress,ve as getContractCode,Ie as getFlowBalance,Pe as getScriptCode,de as getServiceAddress,Fe as getTemplate,Ee as getTransactionCode,F as init,Re as mintFlow,$e as promise,ye as replaceImportAddresses,ke as resolveImports,U as sendTransaction,x as set,me as setBlockOffset,Le as shallPass,_e as shallResolve,De as shallRevert,Ne as shallThrow};
//# sourceMappingURL=index.modern.js.map
