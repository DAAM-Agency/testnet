import{flowConfig as e}from"@onflow/fcl-config";import{config as n}from"@onflow/config";import t from"fs";import r from"path";import*as o from"@onflow/fcl";import{send as c,build as s,getBlock as a,decode as i}from"@onflow/fcl";import{resolveArguments as u,getEnvironment as l,reportMissingImports as f,replaceImportAddresses as m,reportMissing as g,sendTransaction as d,extractContractParameters as h,generateSchema as p,splitArgs as P,deployContract as v,executeScript as M}from"flow-cadut";import{ec as A}from"elliptic";import{SHA3 as b}from"sha3";import*as y from"rlp";const k=(e,n,t)=>{if("string"==typeof n)return k(e,n.split("/"),t);if(!n.length)return e;try{const[r,...o]=n;return k(e[r],o,t)}catch(e){return t}},w=(t,r,o,c)=>{let s=k(e(),o,c);s||(s=c),n().put(t,s)},S=function(e){try{return Promise.resolve(n().get(e))}catch(e){return Promise.reject(e)}},x=function(e,t={}){try{const{port:r}=t,{pkey:o="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=t;return w("PRIVATE_KEY",process,"accounts/emulator-account/key",o),w("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),w("BASE_PATH",process,"testing/paths",e),r&&n().put("accessNode.api",`http://localhost:${r}`),Promise.resolve()}catch(e){return Promise.reject(e)}},T=e=>null==e?null:e.replace(/^0x/,""),F=e=>null==e?null:"0x"+T(e),j=new A("p256"),E=(e,n)=>{const t=j.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new b(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),r=t.r.toArrayLike(Buffer,"be",32),o=t.s.toArrayLike(Buffer,"be",32);return Buffer.concat([r,o]).toString("hex")},B=(e,t=0)=>function(r={}){try{return Promise.resolve(n().get("SERVICE_ADDRESS")).then(function(c){return Promise.resolve(n().get("PRIVATE_KEY")).then(function(n){return e=T(e||c),{...r,tempId:`${e}-${t}`,addr:o.sansPrefix(e),keyId:t,signingFunction:function(r){try{return Promise.resolve({keyId:t,addr:F(e),signature:E(n,r.message)})}catch(e){return Promise.reject(e)}}}})})}catch(e){return Promise.reject(e)}},C=e=>"object"==typeof e&&null!==e;function I(e,n,t){if(!e.s){if(t instanceof R){if(!t.s)return void(t.o=I.bind(null,e,n));1&n&&(n=t.s),t=t.v}if(t&&t.then)return void t.then(I.bind(null,e,n),I.bind(null,e,2));e.s=n,e.v=t;const r=e.o;r&&r(e)}}const R=function(){function e(){}return e.prototype.then=function(n,t){const r=new e,o=this.s;if(o){const e=1&o?n:t;if(e){try{I(r,1,e(this.v))}catch(e){I(r,2,e)}return r}return this}return this.o=function(e){try{const o=e.v;1&e.s?I(r,1,n?n(o):o):t?I(r,1,t(o)):I(r,2,o)}catch(e){I(r,2,e)}},r},e}();function O(e,n){try{var t=e()}catch(e){return n(e)}return t&&t.then?t.then(void 0,n):t}const U=e=>function(n){try{function t(){function e(){return Promise.resolve(he()).then(function(e){function t(){return{code:r,signers:c,args:s,limit:u}}const o={...Fe,...n,FlowManager:e};r=xe(r,o);const a=function(e,n,t){var o=[];for(var c in e)o.push(c);return function(e,n,t){var r,o,c=-1;return function t(s){try{for(;++c<e.length;)if((s=n(c))&&s.then){if(!((a=s)instanceof R&&1&a.s))return void s.then(t,o||(o=I.bind(null,r=new R,2)));s=s.v}r?I(r,1,s):r=s}catch(e){I(r||(r=new R),2,e)}var a}(),r}(o,function(e){return function(e){return Promise.resolve((0,i[e])(r)).then(function(e){r=e})}(o[e])})}(i);return a&&a.then?a.then(t):t()})}let n;const t=function(){if(!a)return Promise.resolve(Te(r)).then(function(e){n=e});n=Fe}();return t&&t.then?t.then(e):e()}let r,o,c,s,a,i,u;if(C(n[0])){const[e]=n,{name:t,code:l,args:f,signers:m,transformers:g,limit:d,service:h=!1}=e;if(a=h,!t&&!l)throw Error("Both `name` and `code` are missing. Provide either of them");o=t,r=l,c=m,s=f,i=g||[],u=d}else"script"===e?[o,s,u,i]=n:[o,c,s,u,i]=n;u=u||999;const l=function(){if(o)return Promise.resolve(("script"===e?Re:Ie)({name:o})).then(function(e){r=e})}();return Promise.resolve(l&&l.then?l.then(t):t())}catch(e){return Promise.reject(e)}},$=function(){try{const e=arguments;return Promise.resolve(O(function(){const n=U("tx");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n,signers:t,limit:r}){function c(){return Promise.resolve(o.send(a)).then(function(e){return Promise.resolve(o.tx(e).onceExecuted()).then(function(e){return[e,null]})})}const s=B(),a=[o.transaction(e),o.payer(s),o.proposer(s),o.limit(r)];if(t){const e=t.map(e=>B(e));a.push(o.authorizations(e))}else a.push(o.authorizations([s]));const i=function(){if(n)return Promise.resolve(u(n,e)).then(function(e){a.push(o.args(e))})}();return i&&i.then?i.then(c):c()})},function(e){return[null,e]}))}catch(e){return Promise.reject(e)}},L=function(){try{const e=arguments;return Promise.resolve(O(function(){const n=U("script");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n,limit:t}){function r(){return Promise.resolve(o.send(c)).then(function(e){return Promise.resolve(o.decode(e)).then(function(e){return[e,null]})})}const c=[o.script(e),o.limit(t)],s=function(){if(n)return Promise.resolve(u(n,e)).then(function(e){c.push(o.args(e))})}();return s&&s.then?s.then(r):r()})},function(e){return[null,e]}))}catch(e){return Promise.reject(e)}},_="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n\n",D=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(_,t,"createAccount =>"),m(_,t)})}catch(e){return Promise.reject(e)}},N="\nimport FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",H=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(N,t,"deployContract =>"),m(N,t)})}catch(e){return Promise.reject(e)}},G='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n  }\n',K=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(G,t,"initManager =>"),m(G,t)})}catch(e){return Promise.reject(e)}},V='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',z=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(V,t,"mintTokens =>"),m(V,t)})}catch(e){return Promise.reject(e)}},Y="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",J=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(Y,t,"registerContract =>"),m(Y,t)})}catch(e){return Promise.reject(e)}},W="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",q=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(W,t,"scratch =>"),m(W,t)})}catch(e){return Promise.reject(e)}},Q="\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n",X=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(Q,t,"setBlockOffset =>"),m(Q,t)})}catch(e){return Promise.reject(e)}},Z="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",ee=function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(Z,t,"updateContract =>"),m(Z,t)})}catch(e){return Promise.reject(e)}};var ne={createAccountTemplate:D,createAccount:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(D(n)).then(function(n){return g("arguments",t.length,3,"createAccount =>"),g("signers",r.length,1,"createAccount =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},deployContractTemplate:H,deployContract:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(H(n)).then(function(n){return g("arguments",t.length,3,"deployContract =>"),g("signers",r.length,1,"deployContract =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},initManagerTemplate:K,initManager:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(K(n)).then(function(n){return g("arguments",t.length,1,"initManager =>"),g("signers",r.length,1,"initManager =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},mintTokensTemplate:z,mintTokens:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(z(n)).then(function(n){return g("arguments",t.length,2,"mintTokens =>"),g("signers",r.length,1,"mintTokens =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},registerContractTemplate:J,registerContract:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(J(n)).then(function(n){return g("arguments",t.length,2,"registerContract =>"),g("signers",r.length,1,"registerContract =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},scratchTemplate:q,scratch:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(q(n)).then(function(n){return g("arguments",t.length,0,"scratch =>"),g("signers",r.length,1,"scratch =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},setBlockOffsetTemplate:X,setBlockOffset:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(X(n)).then(function(n){return g("arguments",t.length,1,"setBlockOffset =>"),g("signers",r.length,1,"setBlockOffset =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}},updateContractTemplate:ee,updateContract:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(ee(n)).then(function(n){return g("arguments",t.length,3,"updateContract =>"),g("signers",r.length,1,"updateContract =>"),d({code:n,...e})})}catch(e){return Promise.reject(e)}}};const{updateContractTemplate:te,deployContractTemplate:re}=ne,oe=e=>Buffer.from(e,"utf8").toString("hex"),ce=function(e){try{let n,t,r,o,c;if(C(e[0])){const[s]=e,{name:a,to:i,addressMap:u,args:l,update:f}=s;if(!a)throw Error("'name' field is missing");n=a,t=i,o=l,r=u,c=f}else[n,t,r,o,c]=e;return Promise.resolve(he()).then(function(e){const s={...Fe,FlowManager:e,...r};return{name:n,to:t,args:o,update:c,addressMap:s}})}catch(e){return Promise.reject(e)}},se=function(){try{return Promise.resolve(ce([].slice.call(arguments))).then(function(e){function n(e){return Promise.resolve(Ce({name:r,addressMap:o})).then(function(n){const t=/[\\\/]/.test(r)?null:r;return ae({to:e,code:n,name:t,args:c,update:s})})}const{to:t,name:r,addressMap:o,args:c,update:s=!1}=e;return t?n(t):Promise.resolve(he()).then(n)})}catch(e){return Promise.reject(e)}},ae=function(e){try{const{to:n,code:t,name:r,args:o,update:c}=e;return Promise.resolve(h(t)).then(function(e){function s(n){return Promise.resolve(he()).then(function(r){return Promise.resolve(Te(t)).then(function(s){return Promise.resolve(he()).then(function(i){const u={...Fe,...s,FlowManager:i},l=oe(xe(t,u));return Promise.resolve(c?te(u):re(u)).then(function(t){let c=[a,l,r];if(o){c=c.concat(o);const n=p(e.args).map(e=>P(e)[0]),r="abcdefghijklmnopqrstuvwxyz";let s=[];for(let e=0;e<n.length;e++)s.push(`${r[e]}: ${n[e]}`);t=(t=t.replace("##ARGS-WITH-TYPES##",`, ${e.args}`)).replace("##ARGS-LIST##",s)}else t=(t=t.replace("##ARGS-WITH-TYPES##","")).replace("##ARGS-LIST##","");return $({code:t,args:c,signers:[n]})})})})})}const a=r||e.contractName;return n?s(n):Promise.resolve(he()).then(s)})}catch(e){return Promise.reject(e)}},ie='\n  pub contract FlowManager {\n\n    /// Account Manager\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub fun getAccountAddress(_ name: String): Address?{\n        let accountManager = self.account\n            .getCapability(self.accountManagerPath)\n            .borrow<&FlowManager.Mapper>()!\n\n        return accountManager.getAddress(name)\n    }\n\n    pub let defaultAccounts: {Address : String}\n\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\n        let alias = self.defaultAccounts[address]!\n        return self.getAccountAddress(alias)!\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    /// Environment Manager\n    pub event BlockOffsetChanged(offset: UInt64)\n\n    pub struct MockBlock {\n        pub let id: [UInt8; 32]\n        pub let height: UInt64\n        pub let view: UInt64\n        pub let timestamp: UFix64\n\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\n            self.id = id\n            self.height = height\n            self.view = view\n            self.timestamp = timestamp\n        }\n    }\n\n    pub fun setBlockOffset(_ offset: UInt64){\n        self.blockOffset = offset\n        emit FlowManager.BlockOffsetChanged(offset: offset)\n    }\n\n    pub fun getBlockHeight(): UInt64 {\n        var block = getCurrentBlock()\n        return block.height + self.blockOffset\n    }\n\n    pub fun getBlock(): MockBlock {\n        var block =  getCurrentBlock()\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\n        return mockBlock\n    }\n\n    pub var blockOffset: UInt64;\n\n\n    // Initialize contract\n    init(){\n        // Environment defaults\n        self.blockOffset = 0;\n\n        // Account Manager initialization\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.defaultAccounts = {\n          0x01: "Alice",\n          0x02: "Bob",\n          0x03: "Charlie",\n          0x04: "Dave",\n          0x05: "Eve"\n        }\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n',ue="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n",le="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",fe='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',me="\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n",ge="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var de=ne;const he=function(){try{return Promise.resolve(n().get("SERVICE_ADDRESS")).then(F)}catch(e){return Promise.reject(e)}},pe=function(){try{return Promise.resolve(he()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(ue,t,"checkManager =>"),m(ue,t)})}catch(e){return Promise.reject(e)}}({FlowManager:e})).then(function(e){return Promise.resolve(L({code:e,service:!0})).then(function([e,n]){const t=function(){if(n&&null===e)return Promise.resolve(function(){try{return Promise.resolve(de.initManagerTemplate()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(ie,t,"FlowManager =>"),m(ie,t)})}catch(e){return Promise.reject(e)}}()).then(function(n){const t=oe(n);return Promise.resolve($({code:e,args:[t],service:!0})).then(function(){})})})}catch(e){return Promise.reject(e)}}()).then(function(){})}();return t&&t.then?t.then(function(){return he()}):he()})})})}catch(e){return Promise.reject(e)}},Pe=function(){try{return Promise.resolve(pe()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(me,t,"getBlockOffset =>"),m(me,t)})}catch(e){return Promise.reject(e)}}({FlowManager:e})).then(function(e){return L({code:e})})})}catch(e){return Promise.reject(e)}},ve=function(e){try{return Promise.resolve(pe()).then(function(n){const t=[e];return Promise.resolve(de.setBlockOffsetTemplate({FlowManager:n})).then(function(e){return $({code:e,args:t,payer:[n]})})})}catch(e){return Promise.reject(e)}},Me=function(e,n=!1){try{if(n){const n=Fe[e];if(void 0!==n)return Promise.resolve(n)}return Promise.resolve(pe()).then(function(n){return Promise.resolve(function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(ge,t,"getContractAddress =>"),m(ge,t)})}catch(e){return Promise.reject(e)}}({FlowManager:n})).then(function(t){return Promise.resolve(L({code:t,args:[e,n],service:!0})).then(function([e]){return e})})})}catch(e){return Promise.reject(e)}};function Ae(e,n,t){if(!e.s){if(t instanceof ye){if(!t.s)return void(t.o=Ae.bind(null,e,n));1&n&&(n=t.s),t=t.v}if(t&&t.then)return void t.then(Ae.bind(null,e,n),Ae.bind(null,e,2));e.s=n,e.v=t;const r=e.o;r&&r(e)}}const be=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,ye=function(){function e(){}return e.prototype.then=function(n,t){const r=new e,o=this.s;if(o){const e=1&o?n:t;if(e){try{Ae(r,1,e(this.v))}catch(e){Ae(r,2,e)}return r}return this}return this.o=function(e){try{const o=e.v;1&e.s?Ae(r,1,n?n(o):o):t?Ae(r,1,t(o)):Ae(r,2,o)}catch(e){Ae(r,2,e)}},r},e}(),ke=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),we=(e,n)=>{const[t,r]=n;return e[t]=r,e},Se=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(ke).reduce(we,{}):{},xe=(e,n,t=!0)=>e.replace(be,(e,r,o,c,s)=>{const a=t?o:s;return`${r}${o} from ${n instanceof Function?n(a):n[a]}`}),Te=function(e){try{const n={},t=function(e,t,r){var o=[];for(var c in e)o.push(c);return function(e,n,t){var r,o,c=-1;return function t(s){try{for(;++c<e.length;)if((s=n(c))&&s.then){if(!((a=s)instanceof ye&&1&a.s))return void s.then(t,o||(o=Ae.bind(null,r=new ye,2)));s=s.v}r?Ae(r,1,s):r=s}catch(e){Ae(r||(r=new ye),2,e)}var a}(),r}(o,function(e){return function(e){const t=function(){if(!Fe[e])return Promise.resolve(Me(e)).then(function(t){n[e]=t});n[e]=Fe[e]}();if(t&&t.then)return t.then(function(){})}(o[e])})}(Se(e));return Promise.resolve(t&&t.then?t.then(function(){return n}):n)}catch(e){return Promise.reject(e)}},Fe={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},je={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},Ee=function(e,t="transactions"){try{return Promise.resolve(n().get("BASE_PATH")).then(function(n){let o=n;if(C(n)){const c=n[t];if(c)return r.resolve(c,`./${e}.cdc`);o=n.base}return r.resolve(o,`./${t}/${e}.cdc`)})}catch(e){return Promise.reject(e)}},Be=(e,n={},r=!1)=>{const o=(e=>t.readFileSync(e,"utf8"))(e);return n?xe(o,{...r?je:Fe,...n}):o},Ce=function({name:e,addressMap:n}){try{return Promise.resolve(Ee(e,"contracts")).then(function(e){return Be(e,n)})}catch(e){return Promise.reject(e)}},Ie=function({name:e,addressMap:n}){try{return Promise.resolve(Ee(e,"transactions")).then(function(e){return Be(e,n)})}catch(e){return Promise.reject(e)}},Re=function({name:e,addressMap:n}){try{return Promise.resolve(Ee(e,"scripts")).then(function(e){return Be(e,n)})}catch(e){return Promise.reject(e)}},Oe={ExampleToken:Fe.FlowToken},Ue=e=>e[0].toLowerCase()+e.slice(1),$e=function(e){try{return Promise.resolve(function(e){try{return Promise.resolve(function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(fe,t,"getBalance =>"),m(fe,t)})}catch(e){return Promise.reject(e)}}(Oe)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:Ue(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(n){const t=xe(n,Fe);return L({code:t,args:[e]})})}catch(e){return Promise.reject(e)}},Le=function(e,n){try{return Promise.resolve(function(e){try{return Promise.resolve(de.mintTokensTemplate(Oe)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:Ue(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(t){const r=xe(t,Fe);return $({code:r,args:[e,n]})})}catch(e){return Promise.reject(e)}},_e=function(e){try{const t=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`;return Promise.resolve(pe()).then(function(e){const r={FlowManager:e};let o;return Promise.resolve(function(e={}){try{return Promise.resolve(l()).then(function(n){const t={...n,...e};return f(le,t,"getAccountAddress =>"),m(le,t)})}catch(e){return Promise.reject(e)}}(r)).then(function(c){return Promise.resolve(L({code:c,args:[t,e],service:!0})).then(function([c]){o=c;const s=function(){if(null===o)return Promise.resolve(de.createAccountTemplate(r)).then(function(r){return Promise.resolve(function(){try{const e=j.keyFromPrivate,t=Buffer,r=t.from;return Promise.resolve(n().get("PRIVATE_KEY")).then(function(n){const o=e.call(j,r.call(t,n,"hex")).getPublic("hex").replace(/^04/,"");return y.encode([Buffer.from(o,"hex"),2,3,1e3]).toString("hex")})}catch(e){return Promise.reject(e)}}()).then(function(n){return Promise.resolve($({code:r,args:[t,n,e]})).then(function([e]){const{events:n}=e,t=n.find(e=>e.type.includes("AccountAdded"));o=t.data.address})})})}();return s&&s.then?s.then(function(){return o}):o})})})}catch(e){return Promise.reject(e)}},{expect:De}=global,Ne=function(e){try{let t;function n(n){return t?n:Promise.resolve(e)}const r=function(){if("function"==typeof e)return t=1,Promise.resolve(e())}();return Promise.resolve(r&&r.then?r.then(n):n(r))}catch(e){return Promise.reject(e)}},He=function(e){try{const n=Ne(e);return Promise.resolve(n).then(function(e){const[n,t]=e;if(t)throw t;let r,o;if(Array.isArray(n)){const{status:e,errorMessage:t}=n;r=e,o=t}else{const{status:e,errorMessage:t}=n;r=e,o=t}return Promise.resolve(De(r).toBe(4)).then(function(){return Promise.resolve(De(o).toBe("")).then(function(){return e})})})}catch(e){return Promise.reject(e)}},Ge=function(e){try{const n=Ne(e);return Promise.resolve(n).then(function(e){const[,n]=e;return De(n).toBe(null),e})}catch(e){return Promise.reject(e)}},Ke=function(e){try{const n=Ne(e);return Promise.resolve(n).then(function(e){const[n,t]=e;return Promise.resolve(De(n).toBe(null)).then(function(){return Promise.resolve(De(t).not.toBe(null)).then(function(){return e})})})}catch(e){return Promise.reject(e)}},Ve=function(e){try{const n=Ne(e);return Promise.resolve(n).then(function(e){const[n,t]=e;return Promise.resolve(De(n).toBe(null)).then(function(){return Promise.resolve(De(t).not.toBe(null)).then(function(){return e})})})}catch(e){return Promise.reject(e)}},ze=function(e){try{function n(){return t.replace(/getCurrentBlock\(\).height/g,"FlowManager.getBlockHeight()")}let t=e;const r=function(){if(!((e,n)=>new RegExp("import\\s+FlowManager").test(n))(0,e))return Promise.resolve(function(){try{return Promise.resolve(he()).then(function(e){return`import FlowManager from ${e}`})}catch(e){return Promise.reject(e)}}()).then(function(n){t=`\n      ${n}\n      ${e}  \n  `})}();return Promise.resolve(r&&r.then?r.then(n):n())}catch(e){return Promise.reject(e)}},{spawn:Ye}=require("child_process"),Je={log:console.log,service:console.log,info:console.log,error:console.error,warn:console.warn};var We=new class{constructor(){this.initialized=!1,this.logging=!1,this.filters=[],this.logProcessor=e=>e}setLogging(e){this.logging=e}log(e,n="log"){!1!==this.logging&&Je[n](e)}checkLevel(e,n){return"debug"===n&&e.includes("LOG")?"log":n}extractKeyValue(e){const[n,t]=e.split("=");return t.includes("LOG")?{key:n,value:t.replace('"[1;34m','"[1[34m')}:{key:n,value:t}}fixJSON(e){const n=e.split("\n").filter(e=>""!==e);return n.length>1?`[${n.join(",")}]`:n[0]}parseDataBuffer(e){const n=e.toString();try{if(n.includes("msg"))return JSON.parse(this.fixJSON(n))}catch(e){return console.error(e),{msg:e,level:"JSON Error"}}return{msg:n,level:"parser"}}start(e=8080,t={}){try{const r=this;n().put("accessNode.api",`http://localhost:${e}`);const{flags:o="",logging:u=!1}=t;let l=e-8080+3569;return r.logging=u,r.process=Ye("flow",["emulator","--verbose","--log-format=JSON",`--admin-port=${e}`,`--port=${l}`,o]),r.logProcessor=e=>e,Promise.resolve(new Promise((n,t)=>{let o;o=setInterval(function(){try{const e=this,t=function(t,r){try{var u=Promise.resolve(c(s([a(!1)])).then(i)).then(function(){clearInterval(o),e.initialized=!0,n(!0)})}catch(e){return}return u&&u.then?u.then(void 0,function(){}):u}();return Promise.resolve(t&&t.then?t.then(function(){}):void 0)}catch(e){return Promise.reject(e)}},100),r.process.stdout.on("data",n=>{const t=r.parseDataBuffer(n);if(Array.isArray(t)){let e=[];r.filters.length>0&&(e=t.filter(e=>{const n=r.checkLevel(e.msg,e.level);return r.filters.includes(n)}));for(let n=0;n<e.length;n++){const e=t[n],{msg:o}=e,c=r.checkLevel(o,e.level);r.log(`${c.toUpperCase()}: ${o}`)}}else{const{msg:n}=t,o=r.checkLevel(n,t.level);r.filters.length>0?r.filters.includes(o)&&(r.log(`${o.toUpperCase()}: ${n}`),n.includes("Starting")&&n.includes(e)&&r.log("EMULATOR IS UP! Listening for events!")):(r.log(`${o.toUpperCase()}: ${n}`),t.msg.includes("Starting HTTP server")&&r.log("EMULATOR IS UP! Listening for events!"))}}),r.process.stderr.on("data",e=>{const{message:n}=r.parseDataBuffer(e);r.log(`EMULATOR ERROR: ${n}`,"error"),r.initialized=!1,clearInterval(o),t()}),r.process.on("close",e=>{r.filters.includes("service")&&r.log(`EMULATOR: process exited with code ${e}`),r.initialized=!1,clearInterval(o),n(!1)})}))}catch(e){return Promise.reject(e)}}clearFilters(){this.filters=[]}removeFilter(e){this.filters=this.filters.filter(n=>n!==e)}addFilter(e){this.filters.includes(e)||this.filters.push(e)}stop(){try{const e=this;return Promise.resolve(new Promise(n=>{e.process.kill(),setTimeout(()=>{e.initialized=!1,n(!1)},50)}))}catch(e){return Promise.reject(e)}}};export{ze as builtInMethods,ae as deployContract,se as deployContractByName,We as emulator,L as executeScript,Se as extractImports,_e as getAccountAddress,Pe as getBlockOffset,S as getConfigValue,Me as getContractAddress,Ce as getContractCode,$e as getFlowBalance,Re as getScriptCode,he as getServiceAddress,Be as getTemplate,Ie as getTransactionCode,x as init,Le as mintFlow,Ne as promise,xe as replaceImportAddresses,Te as resolveImports,$ as sendTransaction,w as set,ve as setBlockOffset,He as shallPass,Ge as shallResolve,Ke as shallRevert,Ve as shallThrow};
//# sourceMappingURL=index.module.js.map
