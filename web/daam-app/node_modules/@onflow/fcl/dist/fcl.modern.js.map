{"version":3,"file":"fcl.modern.js","sources":["../src/default-config.js","../src/VERSION.js","../src/exec/utils/is.js","../src/exec/utils/normalize-args.js","../src/exec/query.js","../src/current-user/normalize/__vsn.js","../src/current-user/normalize/frame.js","../src/current-user/normalize/back-channel-rpc.js","../src/current-user/normalize/service.js","../src/current-user/normalize/pre-authz.js","../src/current-user/normalize/authz.js","../src/current-user/normalize/authn.js","../src/current-user/normalize/open-id.js","../src/current-user/normalize/user-signature.js","../src/current-user/build-user.js","../src/current-user/service-of-type.js","../src/current-user/exec-service/strategies/utils/service-endpoint.js","../src/current-user/exec-service/strategies/utils/fetch-service.js","../src/current-user/normalize/polling-response.js","../src/current-user/normalize/composite-signature.js","../src/current-user/exec-service/strategies/utils/render-frame.js","../src/current-user/exec-service/strategies/utils/frame.js","../src/current-user/exec-service/strategies/utils/poll.js","../src/current-user/exec-service/strategies/http-post.js","../src/current-user/exec-service/index.js","../src/current-user/exec-service/strategies/iframe-rpc.js","../src/current-user/index.js","../src/current-user/merge-services.js","../src/current-user/fetch-services.js","../src/transaction/index.js","../src/exec/mutate.js","../src/serialize/index.js","../src/events/index.js","../src/fcl.js"],"sourcesContent":["import {config} from \"@onflow/sdk\"\n\nconfig()\n  .put(\"accessNode.api\", \"http://localhost:8080\")\n  .put(\"challenge.handshake\", \"http://localhost:8700/authenticate\")\n","export const VERSION = \"0.0.73\"\n","const is = type => d => typeof d === type\n\nexport const isRequired = d => d != null\nexport const isObject = is(\"object\")\nexport const isString = is(\"string\")\nexport const isFunc = is(\"function\")\nexport const isNumber = is(\"number\")\n","import {isFunc} from \"./is\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\n\nexport function normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(sdk.arg, t)\n  return []\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\nimport {isRequired, isObject, isString, isFunc} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\n\n/** Query the Flow Blockchain\n *\n *  @arg {Object} opts         - Query Options and configuration\n *  @arg {string} opts.cadence - Cadence Script used to query Flow\n *  @arg {ArgsFn} opts.args    - Arguments passed to cadence script\n *  @arg {number} opts.limit   - Compute Limit for Query\n *  @returns {Promise<Response>}\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    const cadence = `\n *      cadence: `\n *        pub fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nexport async function query(opts = {}) {\n  await preQuery(opts)\n\n  // prettier-ignore\n  return sdk.send([\n    sdk.script(opts.cadence),\n    sdk.args(normalizeArgs(opts.args || [])),\n    opts.limit && typeof opts.limit === \"number\" && sdk.limit(opts.limit)\n  ]).then(sdk.decode)\n}\n\nasync function preQuery(opts) {\n  invariant(\n    isRequired(opts.cadence),\n    \"query({ cadence }) -- cadence is required\"\n  )\n\n  invariant(\n    isString(opts.cadence),\n    \"query({ cadence }) -- cadence must be a string\"\n  )\n}\n","export const SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const PROVIDER_PRAGMA = {\n  f_type: \"Provider\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const OPEN_ID_PRAGMA = {\n  f_type: \"OpenId\",\n  f_vsn: \"1.0.0\",\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nexport function normalizeFrame(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        old: service,\n        ...SERVICE_PRAGMA,\n        type: \"frame\",\n        endpoint: service.endpoint,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nexport function normalizeBackChannelRpc(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: \"back-channel-rpc\",\n        endpoint: service.endpoint,\n        method: service.method,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {normalizeAuthn} from \"./authn\"\nimport {normalizeAuthz} from \"./authz\"\nimport {normalizePreAuthz} from \"./pre-authz\"\nimport {normalizeFrame} from \"./frame\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeOpenId} from \"./open-id\"\nimport {normalizeUserSignature} from \"./user-signature\"\n\nexport function normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data))\n}\n\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n}\n\nexport function normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data)\n    return normalized\n  } catch (error) {\n    console.error(\n      `Unrecognized FCL Service Type [${service.type}]`,\n      service,\n      error\n    )\n    return service\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizePreAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nexport function normalizeAuthn(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.authn,\n        id: service.pid,\n        provider: {\n          address: withPrefix(service.addr),\n          name: service.name,\n          icon: service.icon,\n        },\n      }\n  }\n}\n","import {SERVICE_PRAGMA, OPEN_ID_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nexport function normalizeOpenId(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return null\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"user-signature\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of user-signature request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeUserSignature(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(\"Invalid user-signature service\")\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport * as rlp from \"@onflow/rlp\"\nimport {fetchServices} from \"./fetch-services\"\nimport {mergeServices} from \"./merge-services\"\nimport {USER_PRAGMA} from \"./normalize/__vsn\"\nimport {normalizeService} from \"./normalize/service\"\n\nfunction deriveCompositeId(authn) {\n  return rlp\n    .encode([\n      authn.provider.address || authn.provider.name || \"UNSPECIFIED\",\n      authn.id,\n    ])\n    .toString(\"hex\")\n}\n\nfunction normalizeData(data) {\n  data.addr = data.addr ? withPrefix(data.addr) : null\n  data.paddr = data.paddr ? withPrefix(data.paddr) : null\n  return data\n}\n\nfunction findService(type, services) {\n  return services.find(d => d.type === type)\n}\n\nexport async function buildUser(data) {\n  data = normalizeData(data)\n\n  var services = mergeServices(\n    data.services || [],\n    await fetchServices(data.hks, data.code)\n  ).map(service => normalizeService(service, data))\n\n  const authn = findService(\"authn\", services)\n\n  return {\n    ...USER_PRAGMA,\n    addr: withPrefix(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.exp,\n  }\n}\n","export function serviceOfType(services = [], type) {\n  return services.find(service => service.type === type)\n}\n","export function serviceEndpoint(service) {\n  const url = new URL(service.endpoint)\n  url.searchParams.append(\"l6n\", window.location.origin)\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value)\n    }\n  }\n  return url\n}\n","import {serviceEndpoint} from \"./service-endpoint\"\n\nexport function fetchService(service, opts = {}) {\n  const method = opts.method || \"POST\"\n  const body =\n    method === \"GET\"\n      ? undefined\n      : JSON.stringify(opts.data || service.data || {})\n\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\",\n    },\n    body: body,\n  }).then((d) => d.json())\n}\n","import {POLLING_RESPONSE_PRAGMA} from \"./__vsn\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeFrame} from \"./frame\"\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nexport function normalizePollingResponse(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...POLLING_RESPONSE_PRAGMA,\n        status: resp.status,\n        reason: resp.reason,\n        data: resp.compositeSignature || resp.data || {},\n        updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n        local: normalizeFrame((resp.local || [])[0]),\n      }\n  }\n}\n","import {COMPOSITE_SIGNATURE_PRAGMA} from \"./__vsn\"\nimport {sansPrefix} from \"@onflow/util-address\"\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nexport function normalizeCompositeSignature(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...COMPOSITE_SIGNATURE_PRAGMA,\n        addr: sansPrefix(resp.addr || resp.address),\n        signature: resp.signature || resp.sig,\n        keyId: resp.keyId,\n      }\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\n\nconst FRAME = \"FCL_IFRAME\"\n\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100vh;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n`\n\nexport function renderFrame(src) {\n  invariant(\n    !document.getElementById(FRAME),\n    \"Attempt at triggering multiple Frames\",\n    {src}\n  )\n\n  const $frame = document.createElement(\"iframe\")\n  $frame.src = src\n  $frame.id = FRAME\n  $frame.allow = \"usb *; hid *\"\n  $frame.frameBorder = \"0\"\n  $frame.style.cssText = FRAME_STYLES\n  document.body.append($frame)\n\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove()\n    }\n  }\n\n  return [$frame, unmount]\n}\n","import {renderFrame} from \"./render-frame\"\nimport {serviceEndpoint} from \"./service-endpoint\"\n\nconst CLOSE_EVENT = \"FCL:FRAME:CLOSE\"\nconst READY_EVENT = \"FCL:FRAME:READY\"\nconst RESPONSE_EVENT = \"FCL:FRAME:RESPONSE\"\nconst OPEN_EVENT = \"FCL:FRAME:OPEN\"\n\nconst noop = () => {}\n\nconst IGNORE = new Set([\n  \"monetizationstart\",\n  \"monetizationpending\",\n  \"monetizationprogress\",\n  \"monetizationstop\",\n])\n\nexport function frame(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  var tab = null\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  window.addEventListener(\"message\", internal)\n  const [$frame, unmount] = renderFrame(serviceEndpoint(service))\n  return {send, close}\n\n  function internal(e) {\n    try {\n      if (typeof e.data !== \"object\") return\n      if (IGNORE.has(e.data.type)) return\n      if (e.data.type === CLOSE_EVENT) close()\n      if (e.data.type === READY_EVENT) onReady(e, {send, close})\n      if (e.data.type === RESPONSE_EVENT) onResponse(e, {send, close})\n      onMessage(e, {send, close})\n\n      // Backwards Compatible\n      if (e.data.type === \"FCL::CHALLENGE::RESPONSE\") {\n        onResponse(e, {send, close})\n      }\n      if (e.data.type === \"FCL::AUTHZ_READY\") onReady(e, {send, close})\n      if (e.data.type === \"FCL::CHALLENGE::CANCEL\") close()\n      if (e.data.type === \"FCL::CANCEL\") close()\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error)\n      close()\n    }\n  }\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", internal)\n      if (tab != null) tab.close()\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Frame Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $frame.contentWindow.postMessage(\n        JSON.parse(JSON.stringify(msg || {})),\n        \"*\"\n      )\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error)\n    }\n  }\n\n  function open(msg) {\n    try {\n      tab = window.open(msg.endpoint)\n      tab.focus()\n    } catch (error) {\n      console.error(\"Frame Open Error\", msg, error)\n    }\n  }\n}\n","import {normalizePollingResponse} from \"../../../normalize/polling-response\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {fetchService} from \"./fetch-service\"\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\",\n}\n\nconst serviceMethod = service => {\n  invariant(\n    OPTIONS[service.method],\n    \"Invalid Service Method for type back-channel-rpc\",\n    {service}\n  )\n  return OPTIONS[service.method]\n}\n\nconst serviceBody = service => {\n  if (service.method === \"HTTP/GET\") return undefined\n  if (service.method === \"HTTP/POST\" && service.data != null)\n    return JSON.stringify(service.data)\n  return undefined\n}\n\nexport async function poll(service, canContinue = () => true) {\n  invariant(service, \"Missing Polling Service\", {service})\n  if (!canContinue()) throw new Error(\"Externally Halted\")\n\n  const resp = await fetchService(service, {\n    method: serviceMethod(service),\n  }).then(normalizePollingResponse)\n\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n    default:\n      await new Promise(r => setTimeout(r, 500))\n      return poll(resp.updates, canContinue)\n  }\n}\n","import {fetchService} from \"./utils/fetch-service\"\nimport {serviceEndpoint} from \"./utils/service-endpoint\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {normalizeCompositeSignature} from \"../../normalize/composite-signature\"\nimport {frame} from \"./utils/frame\"\nimport {poll} from \"./utils/poll\"\n\nexport async function execHttpPost(service, signable, opts) {\n  signable.data = service.data\n  const resp = await fetchService(service, {\n    data: signable,\n  }).then(normalizePollingResponse)\n\n  if (resp.status === \"APPROVED\") {\n    return resp.data\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n  } else if (resp.status === \"PENDING\") {\n    var canContinue = true\n    const {close: closeFrame} = frame(resp.local, {\n      onClose() {\n        canContinue = false\n      },\n    })\n\n    return poll(resp.updates, () => canContinue)\n      .then(compositeSignature => {\n        closeFrame()\n        return normalizeCompositeSignature(compositeSignature)\n      })\n      .catch(error => {\n        console.error(error)\n        closeFrame()\n        throw error\n      })\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {service, resp})\n    throw new Error(`Auto Decline: Invalid Response`)\n  }\n}\n","import {execHttpPost} from \"./strategies/http-post\"\nimport {execIframeRPC} from \"./strategies/iframe-rpc\"\n\nconst STRATEGIES = {\n  \"HTTP/RPC\": execHttpPost,\n  \"HTTP/POST\": execHttpPost,\n  \"IFRAME/RPC\": execIframeRPC,\n}\n\nexport async function execService(service, msg, opts = {}) {\n  try {\n    return STRATEGIES[service.method](service, msg, opts)\n  } catch (error) {\n    console.error(\"execService(service, msg)\", error, {service, msg, opts})\n    throw error\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {frame} from \"./utils/frame\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {normalizeCompositeSignature} from \"../../normalize/composite-signature\"\n\nexport function execIframeRPC(service, body, opts) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall\n\n    body.data = service.data\n\n    frame(service, {\n      onReady(_, {send}) {\n        try {\n          send({\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {send, close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(normalizeCompositeSignature(resp.data))\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(normalizeCompositeSignature(resp.data))\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import \"../default-config\"\nimport {account, config} from \"@onflow/sdk\"\nimport {spawn, send, INIT, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {buildUser} from \"./build-user\"\nimport {serviceOfType} from \"./service-of-type\"\nimport {execService} from \"./exec-service\"\nimport {frame} from \"./exec-service/strategies/utils/frame\"\n\nconst NAME = \"CURRENT_USER\"\nconst UPDATED = \"CURRENT_USER/UPDATED\"\nconst SNAPSHOT = \"SNAPSHOT\"\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\"\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\"\n\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`\n\nconst coldStorage = {\n  get: async () => {\n    const fallback = JSON.parse(DATA)\n    const stored = JSON.parse(sessionStorage.getItem(NAME))\n    if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n      sessionStorage.removeItem(NAME)\n      return fallback\n    }\n    return stored || fallback\n  },\n  put: async data => {\n    sessionStorage.setItem(NAME, JSON.stringify(data))\n    return data\n  },\n}\n\nconst canColdStorage = () => {\n  return config().get(\"persistSession\", true)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    ctx.merge(JSON.parse(DATA))\n    if (await canColdStorage()) {\n      const user = await coldStorage.get()\n      if (notExpired(user)) ctx.merge(user)\n    }\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [SET_CURRENT_USER]: async (ctx, letter, data) => {\n    ctx.merge(data)\n    if (await canColdStorage()) coldStorage.put(ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DEL_CURRENT_USER]: async (ctx, letter) => {\n    ctx.merge(JSON.parse(DATA))\n    if (await canColdStorage()) coldStorage.put(ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n}\n\nconst identity = v => v\nconst spawnCurrentUser = () => spawn(HANDLERS, NAME)\n\nfunction notExpired(user) {\n  return (\n    user.expiresAt == null ||\n    user.expiresAt === 0 ||\n    user.expiresAt > Date.now()\n  )\n}\n\nasync function configLens(regex) {\n  return Object.fromEntries(\n    Object.entries(await config().where(regex)).map(([key, value]) => [\n      key.replace(regex, \"\"),\n      value,\n    ])\n  )\n}\n\nasync function authenticate(opts = {}) {\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser()\n    const user = await snapshot()\n    if (user.loggedIn && notExpired(user)) return resolve(user)\n    const serviceStrategy = opts.serviceStrategy || frame\n\n    serviceStrategy(\n      {\n        endpoint:\n          (await config().get(\"discovery.wallet\")) ||\n          (await config().get(\"challenge.handshake\")),\n      },\n      {\n        async onReady(e, {send, close}) {\n          send({\n            type: \"FCL:AUTHN:CONFIG\",\n            services: await configLens(/^service\\./),\n            app: await configLens(/^app\\.detail\\./),\n          })\n        },\n        async onClose() {\n          resolve(await snapshot())\n        },\n        async onResponse(e, {close}) {\n          send(NAME, SET_CURRENT_USER, await buildUser(e.data))\n          resolve(await snapshot())\n          close()\n        },\n      }\n    )\n  })\n}\n\nfunction unauthenticate() {\n  spawnCurrentUser()\n  send(NAME, DEL_CURRENT_USER)\n}\n\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || [],\n})\n\nfunction resolvePreAuthz(authz) {\n  const resp = normalizePreAuthzResponse(authz)\n  const axs = []\n\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer])\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az])\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az])\n\n  var result = axs.map(([role, az]) => ({\n    tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n    addr: az.identity.address,\n    keyId: az.identity.keyId,\n    signingFunction(signable) {\n      return execService(az, signable)\n    },\n    role: {\n      proposer: role === \"PROPOSER\",\n      payer: role === \"PAYER\",\n      authorizer: role === \"AUTHORIZER\",\n    },\n  }))\n  return result\n}\n\nasync function authorization(account) {\n  spawnCurrentUser()\n  const user = await authenticate()\n  const authz = serviceOfType(user.services, \"authz\")\n\n  const preAuthz = serviceOfType(user.services, \"pre-authz\")\n  if (preAuthz) {\n    return {\n      ...account,\n      tempId: \"CURRENT_USER\",\n      async resolve(account, preSignable) {\n        return resolvePreAuthz(await execService(preAuthz, preSignable))\n      },\n    }\n  }\n\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    resolve: null,\n    addr: sansPrefix(authz.identity.address),\n    keyId: authz.identity.keyId,\n    sequenceNum: null,\n    signature: null,\n    async signingFunction(signable) {\n      return execService(authz, signable, {\n        includeOlderJsonRpcCall: true,\n      })\n    },\n  }\n}\n\nfunction subscribe(callback) {\n  spawnCurrentUser()\n  const EXIT = \"@EXIT\"\n  const self = spawn(async ctx => {\n    ctx.send(NAME, SUBSCRIBE)\n    while (1) {\n      const letter = await ctx.receive()\n      if (letter.tag === EXIT) {\n        ctx.send(NAME, UNSUBSCRIBE)\n        return\n      }\n      callback(letter.data)\n    }\n  })\n  return () => send(self, EXIT)\n}\n\nfunction snapshot() {\n  spawnCurrentUser()\n  return send(NAME, SNAPSHOT, null, {expectReply: true, timeout: 0})\n}\n\nasync function info() {\n  spawnCurrentUser()\n  const {addr} = await snapshot()\n  if (addr == null) throw new Error(\"No Flow Address for Current User\")\n  return account(addr)\n}\n\nconst makeSignable = msg => {\n  invariant(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\")\n\n  return {\n    message: msg,\n  }\n}\n\nasync function signUserMessage(msg, opts = {}) {\n  spawnCurrentUser()\n  const user = await authenticate(opts)\n  const signingService = serviceOfType(user.services, \"user-signature\")\n\n  invariant(\n    signingService,\n    \"Current user must have authorized a signing service.\"\n  )\n\n  try {\n    return await execService(signingService, makeSignable(msg))\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const currentUser = () => {\n  return {\n    authenticate,\n    unauthenticate,\n    authorization,\n    signUserMessage,\n    subscribe,\n    snapshot,\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\n\nexport function mergeServices(sx1 = [], sx2 = []) {\n  // TODO: Make this smarter\n  return [...sx1, ...sx2]\n}\n","export async function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return []\n\n  const url = new URL(servicesURL)\n  url.searchParams.append(\"code\", code)\n\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  }).then(d => d.json())\n\n  if (Array.isArray(resp)) return resp\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = []\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service,\n      })\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider,\n    })\n  }\n\n  return services\n}\n","import \"../default-config\"\nimport {\n  spawn,\n  send,\n  subscriber,\n  snapshoter,\n  UPDATED,\n  SNAPSHOT,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n} from \"@onflow/util-actor\"\nimport {send as fclSend, decode, getTransactionStatus} from \"@onflow/sdk\"\n\nconst RATE = 2500\nconst POLL = \"POLL\"\n\nconst fetchTxStatus = async transactionId => {\n  return fclSend([getTransactionStatus(transactionId)]).then(decode)\n}\n\nconst isExpired = tx => tx.status === 5\nconst isSealed = tx => tx.status >= 4\nconst isExecuted = tx => tx.status >= 3\nconst isFinalized = tx => tx.status >= 2\nconst isPending = tx => tx.status >= 1\nconst isUnknown = tx => tx.status >= 0\n\nconst isDiff = (cur, next) => {\n  return JSON.stringify(cur) !== JSON.stringify(next)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    const tx = await fetchTxStatus(ctx.self())\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    ctx.merge(tx)\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, ctx.all())\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(ctx.all())\n  },\n  [POLL]: async ctx => {\n    const tx = await fetchTxStatus(ctx.self())\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    if (isDiff(ctx.all(), tx)) ctx.broadcast(UPDATED, tx)\n    ctx.merge(tx)\n  },\n}\n\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\")\n    transactionId = transactionId.transactionId\n  if (transactionId == null) throw new Error(\"transactionId required\")\n  return transactionId\n}\n\nconst spawnTransaction = transactionId => {\n  return spawn(HANDLERS, scoped(transactionId))\n}\n\nexport function transaction(transactionId) {\n  function snapshot() {\n    return snapshoter(transactionId, spawnTransaction)\n  }\n\n  function subscribe(callback) {\n    return subscriber(scoped(transactionId), spawnTransaction, callback)\n  }\n\n  function once(predicate) {\n    return function innerOnce(opts = {}) {\n      const suppress = opts.suppress || false\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe(txStatus => {\n          if (txStatus.statusCode && !suppress) {\n            reject(txStatus.errorMessage)\n            unsub()\n          } else if (predicate(txStatus)) {\n            resolve(txStatus)\n            unsub()\n          }\n        })\n      })\n    }\n  }\n\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed),\n  }\n}\n\ntransaction.isUnknown = isUnknown\ntransaction.isPending = isPending\ntransaction.isFinalized = isFinalized\ntransaction.isExecuted = isExecuted\ntransaction.isSealed = isSealed\ntransaction.isExpired = isExpired\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport {isRequired, isObject, isString, isFunc, isNumber} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\nimport {currentUser} from \"../current-user\"\nimport {transaction} from \"../transaction\"\n\n/** As the current user Mutate the Flow Blockchain\n *\n *  @arg {Object} opts - Mutation Options and configuration\n *  @arg {string} opts.cadence - Cadence Transaction used to mutate Flow\n *  @arg {ArgsFn} opts.args - Arguments passed to cadence transaction\n *  @arg {number} opts.limit - Compute Limit for transaction\n *  @returns {string} Transaction Id\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    fcl.mutate({\n *      cadence: `\n *        transaction(a: Int, b: Int, c: Address) {\n *          prepare(acct: AuthAccount) {\n *            log(acct)\n *            log(a)\n *            log(b)\n *            log(c)\n *          }\n *        }\n *      `,\n *      args: (arg, t) => [\n *        arg(6, t.Int),\n *        arg(7, t.Int),\n *        arg(\"0xba1132bc08f82fe2\", t.Address),\n *      ],\n *    })\n *\n *\n *  Options:\n *    type Options = {\n *      cadence: String!,\n *      args: (arg, t) => Array<Arg>,\n *      limit: Number,\n *      authz: AuthzFn, // will overload the trinity of signatory roles\n *      proposer: AuthzFn, // will overload the proposer signatory role\n *      payer: AuthzFn, // will overload the payer signatory role\n *      authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles\n *    }\n */\n\nconst noop = () => {}\n\nexport async function mutate(opts = {}) {\n  var txid\n  try {\n    await prepMutation(opts)\n\n    // Allow for a config to overwrite the authorization function.\n    // prettier-ignore\n    const authz = await sdk.config().get(\"fcl.authz\", currentUser().authorization)\n\n    // prettier-ignore\n    txid = sdk.send([\n      sdk.transaction(opts.cadence),\n\n      sdk.args(normalizeArgs(opts.args || [])),\n\n      opts.limit && isNumber(opts.limit) && sdk.limit(opts.limit),\n\n      // opts.proposer > opts.authz > authz\n      sdk.proposer(opts.proposer || opts.authz || authz),\n\n      // opts.payer > opts.authz > authz\n      sdk.payer(opts.payer || opts.authz || authz),\n\n      // opts.authorizations > [opts.authz > authz]\n      sdk.authorizations(opts.authorizations || [opts.authz || authz]),\n    ]).then(sdk.decode)\n\n    return txid\n  } catch (error) {\n    throw error\n  }\n}\n\nasync function prepMutation(opts) {\n  // prettier-ignore\n  invariant(isRequired(opts), \"mutate(opts) -- opts is required\")\n  // prettier-ignore\n  invariant(isObject(opts), \"mutate(opts) -- opts must be an object\")\n  // prettier-ignore\n  invariant(isRequired(opts.cadence), \"mutate({ cadence }) -- cadence is required\")\n  // prettier-ignore\n  invariant(isString(opts.cadence), \"mutate({ cadence }) -- cadence must be a string\")\n}\n","import {interaction, pipe} from \"@onflow/sdk\"\nimport {resolve as defaultResolve} from \"@onflow/sdk\"\nimport {config, createSignableVoucher} from \"@onflow/sdk\"\n\nexport const serialize = async (args = [], opts = {}) => {\n  // prettier-ignore\n  const resolveFunction = await config()\n    .get(\"sdk.resolve\", opts.resolve || defaultResolve(opts))\n\n  if (Array.isArray(args)) args = await pipe(interaction(), args)\n\n  return JSON.stringify(\n    createSignableVoucher(await resolveFunction(args)),\n    null,\n    2\n  )\n}\n","import {spawn, subscriber, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {config, latestBlock} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nimport {send} from \"@onflow/sdk\"\nimport {decode} from \"@onflow/sdk\"\n\nconst RATE = 10000\nconst UPDATED = \"UPDATED\"\nconst TICK = \"TICK\"\n\nconst scheduleTick = async ctx => {\n  return setTimeout(\n    () => ctx.sendSelf(TICK),\n    await config().get(\"fcl.eventPollRate\", RATE)\n  )\n}\n\nconst HANDLERS = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return\n    let hwm = ctx.get(\"hwm\")\n    if (hwm == null) {\n      ctx.put(\"hwm\", await latestBlock())\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    } else {\n      let next = await latestBlock()\n      ctx.put(\"hwm\", next)\n      const data = await send([\n        getEvents(ctx.self(), hwm.height, next.height - 1),\n      ]).then(decode)\n      for (let d of data) ctx.broadcast(UPDATED, d.data)\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    }\n  },\n  [SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    }\n    ctx.subscribe(letter.from)\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(\"tick\"))\n      ctx.delete(\"tick\")\n      ctx.delete(\"hwm\")\n    }\n  },\n}\n\nconst spawnEvents = key => spawn(HANDLERS, key)\n\nexport function events(key) {\n  return {\n    subscribe: callback => subscriber(key, spawnEvents, callback),\n  }\n}\n","import \"./default-config\"\nexport {VERSION} from \"./VERSION\"\nexport {query} from \"./exec/query\"\nexport {mutate} from \"./exec/mutate\"\nexport {serialize} from \"./serialize\"\nexport {transaction as tx} from \"./transaction\"\nexport {events} from \"./events\"\n\nimport {currentUser} from \"./current-user\"\nexport {currentUser}\n\nexport const authenticate = opts => currentUser().authenticate(opts)\nexport const unauthenticate = () => currentUser().unauthenticate()\nexport const reauthenticate = () => {\n  currentUser().unauthenticate()\n  return currentUser().authenticate()\n}\nexport const signUp = opts => currentUser().authenticate()\nexport const logIn = opts => currentUser().authenticate()\n\nexport const authz = currentUser().authorization\n\nimport * as types from \"@onflow/types\"\nexport const t = types\n\nexport {config} from \"@onflow/sdk\"\nexport {send} from \"@onflow/sdk\"\nexport {decode} from \"@onflow/sdk\"\nexport {account} from \"@onflow/sdk\"\nexport {latestBlock} from \"@onflow/sdk\"\nexport {isOk, isBad, why, pipe, build} from \"@onflow/sdk\"\nexport {withPrefix, sansPrefix, display} from \"@onflow/util-address\"\nexport {template as cadence} from \"@onflow/util-template\"\nexport {template as cdc} from \"@onflow/util-template\"\nexport {createSignableVoucher} from \"@onflow/sdk\"\n\n// builders\nexport {transaction} from \"@onflow/sdk\"\nexport {script} from \"@onflow/sdk\"\nexport {ping} from \"@onflow/sdk\"\nexport {atBlockHeight} from \"@onflow/sdk\"\nexport {atBlockId} from \"@onflow/sdk\"\nexport {getAccount} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nexport {getEventsAtBlockHeightRange} from \"@onflow/sdk\"\nexport {getEventsAtBlockIds} from \"@onflow/sdk\"\nexport {getLatestBlock} from \"@onflow/sdk\"\nexport {getBlock} from \"@onflow/sdk\"\nexport {getBlockHeader} from \"@onflow/sdk\"\nexport {getBlockById} from \"@onflow/sdk\"\nexport {getBlockByHeight} from \"@onflow/sdk\"\nexport {getCollection} from \"@onflow/sdk\"\nexport {getTransactionStatus} from \"@onflow/sdk\"\nexport {getTransaction} from \"@onflow/sdk\"\nexport {authorizations, authorization} from \"@onflow/sdk\"\nexport {args, arg} from \"@onflow/sdk\"\nexport {proposer} from \"@onflow/sdk\"\nexport {payer} from \"@onflow/sdk\"\nexport {limit} from \"@onflow/sdk\"\nexport {ref} from \"@onflow/sdk\"\nexport {params, param} from \"@onflow/sdk\"\nexport {validator} from \"@onflow/sdk\"\nexport {invariant} from \"@onflow/sdk\"\n"],"names":["config","put","VERSION","is","type","d","isRequired","isObject","isString","isFunc","isNumber","normalizeArgs","ax","sdk","arg","t","query","opts","async","invariant","cadence","preQuery","send","script","args","limit","then","decode","SERVICE_PRAGMA","f_type","f_vsn","IDENTITY_PRAGMA","USER_PRAGMA","POLLING_RESPONSE_PRAGMA","COMPOSITE_SIGNATURE_PRAGMA","normalizeFrame","service","old","endpoint","params","data","normalizeBackChannelRpc","method","serviceNormalizers","back-channel-rpc","pre-authz","uid","id","identity","address","withPrefix","addr","keyId","authz","authn","pid","provider","name","icon","frame","open-id","user-signature","Error","deriveCompositeId","rlp","encode","toString","serviceOfType","services","find","serviceEndpoint","url","URL","searchParams","append","window","location","origin","key","value","Object","entries","fetchService","body","undefined","JSON","stringify","fetch","headers","Content-Type","json","normalizePollingResponse","resp","status","reason","compositeSignature","updates","authorizationUpdates","local","normalizeCompositeSignature","sansPrefix","signature","sig","FRAME","noop","IGNORE","Set","close","onClose","onMessage","onReady","onResponse","addEventListener","internal","$frame","unmount","src","document","getElementById","createElement","allow","frameBorder","style","cssText","remove","renderFrame","e","has","error","console","removeEventListener","msg","contentWindow","postMessage","parse","OPTIONS","HTTP/GET","HTTP/POST","serviceMethod","poll","canContinue","Promise","r","setTimeout","execHttpPost","signable","closeFrame","catch","STRATEGIES","HTTP/RPC","IFRAME/RPC","resolve","reject","includeOlderJsonRpcCall","_","jsonrpc","result","execService","NAME","UPDATED","DATA","coldStorage","sessionStorage","setItem","canColdStorage","get","HANDLERS","[object Object]","INIT","ctx","merge","user","fallback","stored","getItem","removeItem","notExpired","SUBSCRIBE","letter","subscribe","from","all","UNSUBSCRIBE","unsubscribe","SNAPSHOT","reply","SET_CURRENT_USER","broadcast","DEL_CURRENT_USER","spawnCurrentUser","spawn","expiresAt","Date","now","configLens","regex","fromEntries","where","map","replace","authenticate","snapshot","loggedIn","serviceStrategy","app","sx1","sx2","mergeServices","paddr","normalizeData","servicesURL","code","Array","isArray","authorizations","push","fetchServices","hks","normalizeService","findService","cid","exp","buildUser","unauthenticate","authorization","account","preAuthz","tempId","preSignable","proposer","payer","normalizePreAuthzResponse","axs","az","role","join","signingFunction","authorizer","resolvePreAuthz","sequenceNum","callback","EXIT","self","receive","tag","expectReply","timeout","signUserMessage","signingService","test","message","makeSignable","log","currentUser","fetchTxStatus","fclSend","getTransactionStatus","transactionId","isSealed","tx","isExecuted","isFinalized","sendSelf","POLL","cur","next","scoped","spawnTransaction","transaction","subscriber","once","predicate","suppress","unsub","txStatus","statusCode","errorMessage","snapshoter","onceFinalized","onceExecuted","onceSealed","mutate","prepMutation","isUnknown","isPending","isExpired","serialize","resolveFunction","defaultResolve","pipe","interaction","createSignableVoucher","scheduleTick","TICK","hasSubs","hwm","latestBlock","getEvents","height","clearTimeout","delete","spawnEvents","events","reauthenticate","signUp","logIn","types"],"mappings":"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"}